// $ANTLR 2.7.7 (2006-11-01): "vhdl.g" -> "VhdlLexer.java"$
package com.simplifide.base.vhdl.parse.grammar;


import com.simplifide.base.sourcefile.antlr.tok.*;



public interface VhdlTokenTypes {
	int EOF = 1;
	int NULL_TREE_LOOKAHEAD = 3;
	int ROOT = 4;
	int DESIGNUNIT = 5;
	int CONTEXTCLAUSE = 6;
	int LIBRARYCLAUSE = 7;
	int LIBRARYUNIT = 8;
	int USECLAUSE = 9;
	int PRIMARYUNIT = 10;
	int SECONDARYUNIT = 11;
	int ARCHITECTUREBODY = 12;
	int ARCHITECTUREDECLARATIVEPART = 13;
	int ARCHITECTURESTATEMENTPART = 14;
	int ARCHITECTURESTATEMENT = 15;
	int BLOCKDECLARATIVEITEM = 16;
	int SUBPROGRAMDECLARATION = 17;
	int PACKAGEBODY = 18;
	int PACKAGEDECLARATION = 19;
	int PACKAGEDECLARATIVEPART = 20;
	int PACKAGEBODYDECLARATIVEPART = 21;
	int ENTITYDECLARATION = 22;
	int ENTITYHEADER = 23;
	int ENTITYDECLARATIVEPART = 24;
	int ENTDEC1 = 25;
	int ENTDEC2 = 26;
	int GENERICCLAUSE = 27;
	int PORTCLAUSE = 28;
	int PORTLIST = 29;
	int PORTELEMENT = 30;
	int CONSTANTPORT = 31;
	int SIGNALPORT = 32;
	int INTERFACEVARIABLEDECLARATION = 33;
	int SUBTYPEINDICATION = 34;
	int SUBTYPEFIRSTNAME = 35;
	int MODE = 36;
	int CONSTANTDECLARATION = 37;
	int SIGNALDECLARATION = 38;
	int VARIABLEDECLARATION = 39;
	int VARASSIGN = 40;
	int SIGNALKIND = 41;
	int SUBTYPEDECLARATION = 42;
	int TYPEDECLARATION = 43;
	int ENUMERATIONTYPEDEFINITION = 44;
	int FILETYPEDEFINITION = 45;
	int ACCESSTYPEDEFINITION = 46;
	int RECORDTYPEDEFINITION = 47;
	int RECORDELEMENT = 48;
	int ELEMENTDECLARATION = 49;
	int UNCONSTRAINEDARRAYDEFINITION = 50;
	int CONSTRAINEDARRAYDEFINITION = 51;
	int INDEXSUBTYPEDEFINITION = 52;
	int INDEXCONSTRAINT = 53;
	int DISCRETERANGE = 54;
	int RANGE = 55;
	int IDENTIFIERLIST = 56;
	int IDENTIFIER = 57;
	int NAME = 58;
	int NAMEDOT = 59;
	int NAMEAPOSTROPHY = 60;
	int NAMEATTRIBUTE = 61;
	int NAMEEXPRESSION = 62;
	int NAMEPARAMETERPART = 63;
	int NAMERANGE = 64;
	int LABELCOLON = 65;
	int COMPONENTINSTANTIAIONSTATEMENT = 66;
	int GENERICMAPASPECT = 67;
	int PORTMAPASPECT = 68;
	int ASSOCIATIONLIST = 69;
	int ASSOCIATIONARROW = 70;
	int ASSOCIATIONNOARROW = 71;
	int EXPRESSION = 72;
	int RELATION = 73;
	int SHIFTEXPRESSION = 74;
	int SIMPLEEXPRESSION = 75;
	int TERM = 76;
	int FACTOR = 77;
	int PRIMARY = 78;
	int PARENOP = 79;
	int ELEMENTASSOCIATION = 80;
	int AGGREGATE = 81;
	int PROCESSSTATEMENT = 82;
	int PROCESSHEAD = 83;
	int PROCESSDECLARATIVEPART = 84;
	int PROCESSSTATEMENTPART = 85;
	int IFSTATEMENT = 86;
	int IFFIRSTCOND = 87;
	int IFCOND = 88;
	int IFLASTCOND = 89;
	int IFEND = 90;
	int CASESTATEMENT = 91;
	int CASESTATEMENTALTERNATIVE = 92;
	int CASEEND = 93;
	int CHOICES = 94;
	int SEQUENCEOFSTATEMENTS = 95;
	int CONCURRENTSIGNALASSIGNMENTSTATEMENT = 96;
	int CONDITIONALSIGNALASSIGNMENT = 97;
	int CONDITIONALWAVEFORMS = 98;
	int CONDITIONALWAVEFORMSBI = 99;
	int SELECTEDSIGNALASSIGNMENT = 100;
	int SELECTEDWAVEFORMS = 101;
	int SELECTEDWAVEFORMITEM = 102;
	int BITSTRINGLIT = 103;
	int STRINGLIT = 104;
	int LITERAL = 105;
	int ADDINGTERM = 106;
	int UNARYOP = 107;
	int ENUMERATIONLITERAL = 108;
	int CHARACTERLIT = 109;
	int NUMERICLITERAL = 110;
	int TARGET = 111;
	int FUNCTIONDECLARATION = 112;
	int PROCEDUREDECLARATION = 113;
	int FUNCTIONPARAMETERLIST = 114;
	int COMPONENTDECLARATION = 115;
	int SEQUENTIALSTATEMENT = 116;
	int SIGNALASSIGNMENTSTATEMENT = 117;
	int VARIABLEASSIGNMENTSTATEMENT = 118;
	int SENSITIVITYLIST = 119;
	int SUBPROGRAMDBODY = 120;
	int SUBPROGRAMDECLARATIVEPART = 121;
	int SUBPROGRAMSTATEMENTPART = 122;
	int WAITSTATEMENT = 123;
	int ASSERTIONSTATEMENT = 124;
	int REPORTSTATEMENT = 125;
	int NEXTSTATEMENT = 126;
	int EXITSTATEMENT = 127;
	int RETURNSTATEMENT = 128;
	int BREAKSTATEMENT = 129;
	int PROCEDURECALLSTATEMENT = 130;
	int LOOPSTATEMENT = 131;
	int ITERATIONSCHEMEQ = 132;
	int ITERATIONSCHEMEWHILE = 133;
	int ITERATIONSCHEMEFOR = 134;
	int SIGNALPORTDEC = 135;
	int CONSTANTPORTDEC = 136;
	int ALIASTYPE = 137;
	int ALIASDECLARATION = 138;
	int INSTUNITCOMPOPT = 139;
	int INSTUNITCOMP = 140;
	int INSTUNITENT = 141;
	int INSTUNITCONF = 142;
	int COMPONENTISDUMMY = 143;
	int GENERICCLAUSEDUMMY = 144;
	int PORTCLAUSEDUMMY = 145;
	int CONCURRENTASSERTIONSTATEMENT = 146;
	int LABELCOLONWRAP = 147;
	int PORTASSIGNMENT = 148;
	int CONSTANTPORTINQ = 149;
	int SIGNALPORTMODEQ = 150;
	int SIGNALPORTBUSQ = 151;
	int ATTRIBUTEDECLARATION = 152;
	int ATTRIBUTESPECIFICATION = 153;
	int GENERATESTATEMENT = 154;
	int GENERATEDECLARATIVEPART = 155;
	int GENERATESTATEMENTPART = 156;
	int GENERATEFOR = 157;
	int GENERATEIF = 158;
	int PARAMETERSPECIFICATION = 159;
	int FILEDECLARATION = 160;
	int FILEOPENINFORMATION = 161;
	int OPTS = 162;
	int POSTPONEDQ = 163;
	int FUNCTIONPURE = 164;
	int BLOCKSTATEMENT = 165;
	int PHYSICALLITERAL = 166;
	int EXPRESSIONORRANGE = 167;
	int PROTECTED = 168;
	int END = 169;
	int BODY = 170;
	int DECIMAL_LITERAL = 171;
	int BASED_LITERAL = 172;
	int ACCESS = 173;
	int VARASGN = 174;
	int ACROSS = 175;
	int OPEN = 176;
	int LPAREN = 177;
	int RPAREN = 178;
	int COMMA = 179;
	int COLON = 180;
	int ALIAS = 181;
	int IS = 182;
	int SEMI = 183;
	int CHARACTER_LITERAL = 184;
	int STRING_LITERAL = 185;
	int NEW = 186;
	int APOSTROPHE = 187;
	int ARCHITECTURE = 188;
	int OF = 189;
	int BEGIN = 190;
	int POSTPONED = 191;
	int PROCESS = 192;
	int ASSERT = 193;
	int GENERATE = 194;
	int BREAK = 195;
	int ARRAY = 196;
	int REPORT = 197;
	int SEVERITY = 198;
	int ARROW = 199;
	int ATTRIBUTE = 200;
	int RANGETOK = 201;
	int THROUGH = 202;
	int TOLERANCE = 203;
	int USE = 204;
	int FOR = 205;
	int BLOCK = 206;
	int QUANTITY = 207;
	int WHEN = 208;
	int CASE = 209;
	int OTHERS = 210;
	int BAR = 211;
	int COMPONENT = 212;
	int UNTIL = 213;
	int LE = 214;
	int ELSE = 215;
	int CONFIGURATION = 216;
	int CONSTANT = 217;
	int TRANSPORT = 218;
	int REJECT = 219;
	int INERTIAL = 220;
	int TO = 221;
	int DOWNTO = 222;
	int DISCONNECT = 223;
	int AFTER = 224;
	int ENTITY = 225;
	int PROCEDURE = 226;
	int FUNCTION = 227;
	int PACKAGE = 228;
	int TYPE = 229;
	int SUBTYPE = 230;
	int SIGNAL = 231;
	int VARIABLE = 232;
	int LABEL = 233;
	int UNITS = 234;
	int GROUP = 235;
	int FILE = 236;
	int NATURE = 237;
	int SUBNATURE = 238;
	int TERMINAL = 239;
	int BOX = 240;
	int ALL = 241;
	int EXIT = 242;
	int DOUBLESTAR = 243;
	int EQ = 244;
	int NEQ = 245;
	int LOWERTHAN = 246;
	int GREATERTHAN = 247;
	int GE = 248;
	int AND = 249;
	int OR = 250;
	int NAND = 251;
	int NOR = 252;
	int XOR = 253;
	int XNOR = 254;
	int SLL = 255;
	int SRL = 256;
	int SLA = 257;
	int SRA = 258;
	int ROL = 259;
	int ROR = 260;
	int PLUS = 261;
	int MINUS = 262;
	int AMPERSAND = 263;
	int MUL = 264;
	int DIV = 265;
	int MOD = 266;
	int REM = 267;
	int ABS = 268;
	int NOT = 269;
	int IF = 270;
	int GENERIC = 271;
	int MAP = 272;
	int BASIC_IDENTIFIER = 273;
	int EXTENDED_IDENTIFIER = 274;
	int REFERENCE = 275;
	int THEN = 276;
	int ELSIF = 277;
	int IN = 278;
	int BUS = 279;
	int OUT = 280;
	int WHILE = 281;
	int LIBRARY = 282;
	int NULLTOK = 283;
	int BIT_STRING_LITERAL = 284;
	int DBLQUOTE = 285;
	int LOOP = 286;
	int INOUT = 287;
	int BUFFER = 288;
	int LINKAGE = 289;
	int DOT = 290;
	int NEXT = 291;
	int GUARDED = 292;
	int PORT = 293;
	int RECORD = 294;
	int RETURN = 295;
	int WITH = 296;
	int SELECT = 297;
	int ON = 298;
	int WAIT = 299;
	int REGISTER = 300;
	int LBRACKET = 301;
	int RBRACKET = 302;
	int SPECTRUM = 303;
	int NOISE = 304;
	int PURE = 305;
	int IMPURE = 306;
	int CONTEXT = 307;
	int SHARED = 308;
	int UNAFFECTED = 309;
	int PROCEDURAL = 310;
	int WS_ = 311;
	int NEWLINE = 312;
	int COMMENT = 313;
	int ASSIGN = 314;
	int BACKSLASH = 315;
	int OTHER_SPECIAL_CHARACTER = 316;
	int ALL_CHARACTER = 317;
	int INTEGER = 318;
	int EXPONENT = 319;
	int BASED_INTEGER = 320;
}
